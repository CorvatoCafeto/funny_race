[gd_resource type="ShaderMaterial" load_steps=2 format=2]

[sub_resource type="Shader" id=25]
code = "shader_type spatial;
render_mode blend_mix, depth_draw_always, cull_back, diffuse_burley, specular_schlick_ggx;



void dir_space_convert_view_to_world(inout vec3 dir, in mat4 inv_view_mat) {
    dir = normalize(inv_view_mat * vec4(dir, 0.0)).xyz;
}


void dir_space_convert_world_to_view(inout vec3 dir, in mat4 view_mat) {
    dir = normalize(view_mat * vec4(dir, 0.0)).xyz;
}


void node_bsdf_principled(vec4 color, float subsurface, vec4 subsurface_color,
        float metallic, float specular, float roughness, float clearcoat,
        float clearcoat_roughness, float anisotropy, float transmission,
        float IOR, out vec3 albedo, out float sss_strength_out,
        out float metallic_out, out float specular_out,
        out float roughness_out, out float clearcoat_out,
        out float clearcoat_gloss_out, out float anisotropy_out,
        out float transmission_out, out float ior) {
    metallic = clamp(metallic, 0.0, 1.0);
    transmission = clamp(transmission, 0.0, 1.0);

    subsurface = subsurface * (1.0 - metallic);

    albedo = mix(color.rgb, subsurface_color.rgb, subsurface);
    sss_strength_out = subsurface;
    metallic_out = metallic;
    specular_out = pow((IOR - 1.0)/(IOR + 1.0), 2)/0.08;
    roughness_out = roughness;
    clearcoat_out = clearcoat * (1.0 - transmission);
    clearcoat_gloss_out = 1.0 - clearcoat_roughness;
    anisotropy_out = clamp(anisotropy, 0.0, 1.0);
    transmission_out = (1.0 - transmission) * (1.0 - metallic);
    ior = IOR;
}


void node_normal_map_tangent(float strength, vec4 color, vec3 normal,
        vec3 tangent, vec3 binormal, out vec3 out_normal) {
    vec3 signed_color = vec3(2.0, -2.0, 2.0) * (color.xzy - vec3(0.5));
    vec3 tex_normal = signed_color.x * tangent +
                      signed_color.y * binormal +
                      signed_color.z * normal;
    out_normal = strength * tex_normal + (1.0 - strength) * normal;
}


void space_convert_yup_to_zup(inout vec3 dir) {
    dir = mat3(vec3(1, 0, 0), vec3(0, 0, 1), vec3(0, -1, 0)) * dir;
}


void space_convert_zup_to_yup(inout vec3 dir) {
    dir = mat3(vec3(1, 0, 0), vec3(0, 0, -1), vec3(0, 1, 0)) * dir;
}

void vertex () {
}

void fragment () {
	mat4 INV_VIEW_MAT = inverse(INV_CAMERA_MATRIX);
	
	// node: 'Normal Map'
	// type: 'ShaderNodeNormalMap'
	// input sockets handling
	float node0_in0_strength = float(0.1400168091058731);
	vec4 node0_in1_color = vec4(0.5, 0.5, 1.0, 1.0);
	// output sockets definitions
	vec3 node0_out0_normal;
	
	node_normal_map_tangent(node0_in0_strength, node0_in1_color, NORMAL, TANGENT,
		BINORMAL, node0_out0_normal);
	dir_space_convert_view_to_world(node0_out0_normal, INV_VIEW_MAT);
	space_convert_yup_to_zup(node0_out0_normal);
	
	
	// node: 'Principled BSDF'
	// type: 'ShaderNodeBsdfPrincipled'
	// input sockets handling
	vec4 node1_in0_basecolor =	vec4(0.9686274509803922,0.792156862745098,0.09411764705882353,1);
	float node1_in1_subsurface = float(0.0);
	vec3 node1_in2_subsurfaceradius = vec3(1.0, 0.20000000298023224,
		0.10000000149011612);
	vec4 node1_in3_subsurfacecolor = vec4(0.800000011920929, 0.800000011920929,
		0.800000011920929, 1.0);
	float node1_in4_metallic = float(0.0);
	float node1_in5_specular = float(2.0);
	float node1_in6_speculartint = float(0.0);
	float node1_in7_roughness = float(0.8082915544509888);
	float node1_in8_anisotropic = float(0.0);
	float node1_in9_anisotropicrotation = float(0.0);
	float node1_in10_sheen = float(0.0);
	float node1_in11_sheentint = float(0.5);
	float node1_in12_clearcoat = float(0.0);
	float node1_in13_clearcoatroughness = float(0.029999999329447746);
	float node1_in14_ior = float(1.4500000476837158);
	float node1_in15_transmission = float(0.0);
	float node1_in16_transmissionroughness = float(0.0);
	vec4 node1_in17_emission = vec4(0.0, 0.0, 0.0, 1.0);
	float node1_in18_alpha = float(1.0);
	vec3 node1_in19_normal = node0_out0_normal;
	vec3 node1_in20_clearcoatnormal = vec3(0.0, 0.0, 0.0);
	vec3 node1_in21_tangent = TANGENT;
	// output sockets definitions
	vec3 node1_bsdf_out0_albedo;
	float node1_bsdf_out1_sss_strength;
	float node1_bsdf_out3_specular;
	float node1_bsdf_out2_metallic;
	float node1_bsdf_out4_roughness;
	float node1_bsdf_out5_clearcoat;
	float node1_bsdf_out6_clearcoat_gloss;
	float node1_bsdf_out7_anisotropy;
	float node1_bsdf_out8_transmission;
	float node1_bsdf_out9_ior;
	
	node_bsdf_principled(node1_in0_basecolor, node1_in1_subsurface,
		node1_in3_subsurfacecolor, node1_in4_metallic, node1_in5_specular,
		node1_in7_roughness, node1_in12_clearcoat, node1_in13_clearcoatroughness,
		node1_in8_anisotropic, node1_in15_transmission, node1_in14_ior,
		node1_bsdf_out0_albedo, node1_bsdf_out1_sss_strength, node1_bsdf_out2_metallic,
		node1_bsdf_out3_specular, node1_bsdf_out4_roughness, node1_bsdf_out5_clearcoat,
		node1_bsdf_out6_clearcoat_gloss, node1_bsdf_out7_anisotropy,
		node1_bsdf_out8_transmission, node1_bsdf_out9_ior);
	space_convert_zup_to_yup(node1_in19_normal);
	dir_space_convert_world_to_view(node1_in19_normal, INV_CAMERA_MATRIX);
	
	
	ALBEDO = node1_bsdf_out0_albedo;
	SSS_STRENGTH = node1_bsdf_out1_sss_strength;
	SPECULAR = node1_bsdf_out3_specular;
	METALLIC = node1_bsdf_out2_metallic;
	ROUGHNESS = node1_bsdf_out4_roughness;
	CLEARCOAT = node1_bsdf_out5_clearcoat;
	CLEARCOAT_GLOSS = node1_bsdf_out6_clearcoat_gloss;
	NORMAL = node1_in19_normal;
	// uncomment it when you need it
	// TRANSMISSION = vec3(1.0, 1.0, 1.0) * node1_bsdf_out8_transmission;
	// uncomment it when you are modifing TANGENT
	// TANGENT = normalize(cross(cross(node1_in21_tangent, NORMAL), NORMAL));
	// BINORMAL = cross(TANGENT, NORMAL);
	// uncomment it when you have tangent(UV) set
	// ANISOTROPY = node1_bsdf_out7_anisotropy;
}
"

[resource]
shader = SubResource( 25 )
